#!/usr/bin/env node

import { logErrAndExit, parseJsonFileSync, linesSyncArray } from '../../utils.node'

import * as Twit from 'twit'
import * as minimist from 'minimist'

// import * as fs from 'fs'
// import { join } from 'path'



interface Args {
  _: Array<string>
}

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
const ukraineBboxRough = [21.884766, 47.502359, 36.254883, 52.589701]
const bayAreaBbox = [-123.112793, 37.247821, -121.684570, 38.264063]
const kyiv = [29.888306, 50.035974, 31.404419, 50.916887]

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
async function main() {
  const args: Args = minimist(process.argv.slice(2))
  let [configPath, wordlistPath] = args._

  let config = parseJsonFileSync(configPath)
  // let words = linesSyncArray(wordlistPath)

  let twit = new Twit({
    ...config.twit,
    // app_only_auth: true,
  })

  // console.error(`Starting stream for config:`)
  // console.error(words)
  let stream = twit.stream('statuses/filter', {
    // languages: ['uk'],
    // track: words,
    locations: kyiv,
  }).on('connect', function (conn) {
    console.log('connecting')
  }).on('reconnect', function (reconn, res, interval) {
    console.log('reconnecting. statusCode:', res.statusCode)
  }).on('message', message => {
    console.log(message)
  }).on('tweet', tweet => {
    console.log(tweet)
  }).start()
}

////////////////////////////////////////////////////////////////////////////////
if (require.main === module) {
  main().catch(logErrAndExit)
}


